(**************************************************************************)
(*                                                                        *)
(*                               Flow Caml                                *)
(*                                                                        *)
(*          Vincent Simonet, Projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*  Copyright 2002, 2003 Institut National de Recherche en Informatique   *)
(*  et en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with the   *)
(*  special exception on linking described in file ../LICENSE.            *)
(*                                                                        *)
(*  Author contact: Vincent.Simonet@inria.fr                              *)
(*  Software page: http://cristal.inria.fr/~simonet/soft/flowcaml/        *)
(*                                                                        *)
(**************************************************************************)

(* Extensible buffers *)

type ('a, 'b) t =
 { mutable buffer : ('a, 'a) charray;
   mutable position : 'a int;
   mutable length : 'a int;
   initial_buffer : ('a, 'a) charray
 } # 'b

let create n =
 let n = if n < 1 then 1 else n in
 let n = if n > Sys.max_string_length then Sys.max_string_length else n in
 let s = Charray.make n ' ' in
 {buffer = s; position = 0; length = n; initial_buffer = s}

let contents b = string_of_charray (Charray.sub b.buffer 0 b.position)

let length b = b.position

let clear b = b.position <- 0

let reset b =
  b.position <- 0; b.buffer <- b.initial_buffer;
  b.length <- Charray.length b.buffer

let resize b more =
  let len = b.length in
  let new_len = ref len in
  while b.position + more > !new_len do new_len := 2 * !new_len done;
  if !new_len > Sys.max_string_length then begin
    if b.position + more <= Sys.max_string_length
    then new_len := Sys.max_string_length
    else assert false (* failwith "Buffer.add: cannot grow buffer" *)
  end;
  let new_buffer = Charray.make !new_len ' ' in
  Charray.blit b.buffer 0 new_buffer 0 b.position;
  b.buffer <- new_buffer;
  b.length <- !new_len

let add_char b c =
  let pos = b.position in
  if pos >= b.length then resize b 1;
  b.buffer.[pos] <- c;
  b.position <- pos + 1

let add_substring b s offset len =
  if offset < 0 || len < 0 || offset > String.length s - len
  then (* invalid_arg `Buffer.add_substring`; *) assert false;
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  Charray.blit (charray_of_string s) offset b.buffer b.position len;
  b.position <- new_position

let add_string b s =
  let len = String.length s in
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  Charray.blit (charray_of_string s) 0 b.buffer b.position len;
  b.position <- new_position
  
let add_buffer b bs =
  add_substring b (string_of_charray bs.buffer) 0 bs.position
