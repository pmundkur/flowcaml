(**************************************************************************)
(*                                                                        *)
(*                               Flow Caml                                *)
(*                                                                        *)
(*          Vincent Simonet, Projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*  Copyright 2002, 2003 Institut National de Recherche en Informatique   *)
(*  et en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with the   *)
(*  special exception on linking described in file ../LICENSE.            *)
(*                                                                        *)
(*  Author contact: Vincent.Simonet@inria.fr                              *)
(*  Software page: http://cristal.inria.fr/~simonet/soft/flowcaml/        *)
(*                                                                        *)
(**************************************************************************)

(* $Id: hashtbl.fml,v 1.3 2003/06/26 13:32:52 simonet Exp $ *)

(* Hash tables *)

external hash_param : 'a int -> 'a int -> 'b -> 'a int
                      with content('b) < 'a
                    = "hash_univ_param" "noalloc"

let hash x = hash_param 10 100 x

external (mod) : 'a int -> 'a int -> 'a int = ""

(* We do dynamic hashing, and resize the table and rehash the elements
   when buckets become too long. *)

type ('a, 'b, 'c, 'd) t =
  { mutable size: 'c int;                              (* number of elements *)
    mutable data: (('a, 'b, 'c) bucketlist, 'c) array  (* the buckets *)
  } # 'd

and ('a, 'b, 'c) bucketlist =
    Empty
  | Cons of 'a * 'b * ('a, 'b, 'c) bucketlist
  # 'c

let create initial_size =
  let s = min (max 1 initial_size) Sys.max_array_length in
  { size = 0; data = Array.make s Empty }

let clear h =
  for i = 0 to Array.length h.data - 1 do
    h.data.(i) <- Empty
  done;
  h.size <- 0

let copy h =
  { size = h.size;
    data = Array.copy h.data }

let resize hashfun tbl =
  let odata = tbl.data in
  let osize = Array.length odata in
  let nsize = min (2 * osize + 1) Sys.max_array_length in
  if nsize <> osize then begin
    let ndata = Array.create nsize Empty in
    let rec insert_bucket = function
        Empty -> ()
      | Cons(key, data, rest) ->
          insert_bucket rest; (* preserve original order of elements *)
	  let hkey = hashfun key in
          let nidx = hkey mod nsize in
          ndata.(nidx) <- Cons(key, data, ndata.(nidx)) in
    for i = 0 to osize - 1 do
      insert_bucket odata.(i)
    done;
    tbl.data <- ndata;
  end

let add h key info =
  let i = (hash key) mod (Array.length h.data) in
  let bucket = Cons(key, info, h.data.(i)) in
  h.data.(i) <- bucket;
  h.size <- succ h.size;
  if h.size > Array.length h.data lsl 1 then resize hash h

let remove h key =
  let rec remove_bucket = function
      Empty ->
        Empty
    | Cons(k, i, next) ->
        if k = key
        then begin h.size <- pred h.size; next end
        else Cons(k, i, remove_bucket next) in
  let i = (hash key) mod (Array.length h.data) in
  h.data.(i) <- remove_bucket h.data.(i)

let rec find_rec key = function
    Empty ->
      raise Not_found
  | Cons(k, d, rest) ->
      if key = k then d else find_rec key rest

let find h key =
  match h.data.((hash key) mod (Array.length h.data)) with
    Empty -> raise Not_found
  | Cons(k1, d1, rest1) ->
      if key = k1 then d1 else
      match rest1 with
        Empty -> raise Not_found
      | Cons(k2, d2, rest2) ->
          if key = k2 then d2 else
          match rest2 with
            Empty -> raise Not_found
          | Cons(k3, d3, rest3) ->
              if key = k3 then d3 else find_rec key rest3

let find_all h key =
  let rec find_in_bucket = function
    Empty ->
      []
  | Cons(k, d, rest) ->
      if k = key then d :: find_in_bucket rest else find_in_bucket rest in
  find_in_bucket h.data.((hash key) mod (Array.length h.data))

let replace h key info =
  let rec replace_bucket = function
      Empty ->
        raise Not_found
    | Cons(k, i, next) ->
        if k = key
        then Cons(k, info, next)
        else Cons(k, i, replace_bucket next) in
  let i = (hash key) mod (Array.length h.data) in
  let l = h.data.(i) in
  try
    h.data.(i) <- replace_bucket l
  with Not_found ->
    h.data.(i) <- Cons(key, info, l);
    h.size <- succ h.size;
    if h.size > Array.length h.data lsl 1 then resize hash h

let mem h key =
  let rec mem_in_bucket = function
  | Empty ->
      false
  | Cons(k, d, rest) ->
      k = key || mem_in_bucket rest in
  mem_in_bucket h.data.((hash key) mod (Array.length h.data))

let iter f h =
  let rec do_bucket = function
      Empty ->
        ()
    | Cons(k, d, rest) ->
        f k d; do_bucket rest in
  let d = h.data in
  for i = 0 to Array.length d - 1 do
    do_bucket d.(i)
  done

let fold f h init =
  let rec do_bucket b accu =
    match b with
      Empty ->
        accu
    | Cons(k, d, rest) ->
        do_bucket rest (f k d accu) in
  let d = h.data in
  let accu = ref init in
  for i = 0 to Array.length d - 1 do
    accu := do_bucket d.(i) !accu
  done;
  !accu


(* Functorial interface *)

module type HashedType =
  sig
    type (#'a:level) t
    val equal: 'a t -> 'a t -> 'a bool
    val hash: 'a t -> 'a int
  end

module type S =
  sig
    type (#'a:level) key
    type (='a:level, ='b:type, ='c:level, #'d:level) t
    val create: 'a int -> ('b, 'c, 'a, 'd) t
    val clear : ('a, 'b, 'c, 'c) t -{'c ||}-> unit
    val copy : ('a, 'b, 'c, 'd) t -> ('e, 'f, 'd, 'g) t
               with 'b < 'f
               and  'a < 'e
               and  'c < 'd
    val add : ('a, 'b, 'c, 'c) t -> 'a key -> 'b -{'c ||}-> unit
              with 'a < 'c
    val remove : ('a, 'b, 'c, 'c) t -> 'c key -{'c ||}-> unit
                 with 'a < 'c
    val find : ('a, 'b, 'c, 'd) t -> 'd key -{'e | Not_found: 'e |}-> 'f
               with 'a, 'c, 'd < 'e, level('f)
               and  'b < 'f
    val find_all : ('a, 'b, 'c, 'd) t -> 'd key -> ('b, 'd) list
                   with 'c, 'a < 'd
    val replace : ('a, 'b, 'c, 'c) t -> 'a key -> 'b -{'c ||}-> unit
                  with 'a < 'c

    val mem : ('a, 'b, 'c, 'd) t -> 'd key -> 'd bool
              with 'a, 'c < 'd

    val iter : ('a key -{'b | 'c | 'd}-> 'e -{'f | 'c | 'f}-> 'g) ->
               ('a, 'e, 'h, 'd) t -{'d | 'c |}-> unit
               with content('c), 'd, 'h < 'b, 'f

    val fold : ('a key -{'b | 'c | 'd}->
                'e -{'f | 'c | 'g}-> 'h -{'i | 'c | 'j}-> 'h) ->
               ('a, 'e, 'k, 'd) t -> 'h -{'d | 'c |}-> 'h
               with content('c), 'd, 'g, 'j, 'k < level('h), 'i
               and  'k, 'd, 'g, content('c) < 'f
               and  'k, 'd, content('c) < 'b
  end

module Make(H: HashedType): (S with type 'a key = 'a H.t) =
  struct
    type 'a key = 'a H.t
    type ('a, 'b, 'c, 'd) hashtbl = ('a key, 'b, 'c, 'd) t
    type ('a, 'b, 'c, 'd) t = ('a, 'b, 'c, 'd) hashtbl
    let create = create
    let clear = clear
    let copy = copy

    let safehash key = (H.hash key) land max_int

    let add h key info =
      let i = (safehash key) mod (Array.length h.data) in
      let bucket = Cons(key, info, h.data.(i)) in
      h.data.(i) <- bucket;
      h.size <- succ h.size;
      if h.size > Array.length h.data lsl 1 then resize safehash h

    let remove h key =
      let rec remove_bucket = function
          Empty ->
            Empty
        | Cons(k, i, next) ->
            if H.equal k key
            then begin h.size <- pred h.size; next end
            else Cons(k, i, remove_bucket next) in
      let i = (safehash key) mod (Array.length h.data) in
      h.data.(i) <- remove_bucket h.data.(i)

    let rec find_rec key = function
        Empty ->
          raise Not_found
      | Cons(k, d, rest) ->
          if H.equal key k then d else find_rec key rest

    let find h key =
      match h.data.((safehash key) mod (Array.length h.data)) with
        Empty -> raise Not_found
      | Cons(k1, d1, rest1) ->
          if H.equal key k1 then d1 else
          match rest1 with
            Empty -> raise Not_found
          | Cons(k2, d2, rest2) ->
              if H.equal key k2 then d2 else
              match rest2 with
                Empty -> raise Not_found
              | Cons(k3, d3, rest3) ->
                  if H.equal key k3 then d3 else find_rec key rest3

    let find_all h key =
      let rec find_in_bucket = function
        Empty ->
          []
      | Cons(k, d, rest) ->
          if H.equal k key
          then d :: find_in_bucket rest
          else find_in_bucket rest in
      find_in_bucket h.data.((safehash key) mod (Array.length h.data))

    let replace h key info =
      let rec replace_bucket = function
          Empty ->
            raise Not_found
        | Cons(k, i, next) ->
            if H.equal k key
            then Cons(k, info, next)
            else Cons(k, i, replace_bucket next) in
      let i = (safehash key) mod (Array.length h.data) in
      let l = h.data.(i) in
      try
        h.data.(i) <- replace_bucket l
      with Not_found ->
        h.data.(i) <- Cons(key, info, l);
        h.size <- succ h.size;
        if h.size > Array.length h.data lsl 1 then resize safehash h

    let mem h key =
      let rec mem_in_bucket = function
      | Empty ->
          false
      | Cons(k, d, rest) ->
          H.equal k key || mem_in_bucket rest in
      mem_in_bucket h.data.((safehash key) mod (Array.length h.data))

    let iter = iter
    let fold = fold
  end

