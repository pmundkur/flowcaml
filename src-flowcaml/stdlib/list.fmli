(**************************************************************************)
(*                                                                        *)
(*                               Flow Caml                                *)
(*                                                                        *)
(*          Vincent Simonet, Projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*  Copyright 2002, 2003 Institut National de Recherche en Informatique   *)
(*  et en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with the   *)
(*  special exception on linking described in file ../LICENSE.            *)
(*                                                                        *)
(*  Author contact: Vincent.Simonet@inria.fr                              *)
(*  Software page: http://cristal.inria.fr/~simonet/soft/flowcaml/        *)
(*                                                                        *)
(**************************************************************************)

(** List operations.

   Some functions are flagged as not tail-recursive.  A tail-recursive
   function uses constant stack space, while a non-tail-recursive function
   uses stack space proportional to the length of its list argument, which
   can be a problem with very long lists.  When the function takes several
   list arguments, an approximate formula giving stack usage (in some
   unspecified constant unit) is shown in parentheses.

   The above considerations can usually be ignored if your lists are not
   longer than about 10000 elements.
*)

val length : ('a, 'b) list -> 'b int
(** Return the length (number of elements) of the given list. *)

val hd : ('a, 'b) list -{'c | Failure: 'c |}-> 'a
with 'b < level('a) and 'b < 'c
(** Return the first element of the given list. Raise
   [Failure "hd"] if the list is empty. *)

val tl : ('a, 'b) list -{'c | Failure: 'c |}-> ('a, 'b) list
with 'b < 'c
(** Return the given list without its first element. Raise
   [Failure "tl"] if the list is empty. *)

val nth : ('a, 'b) list ->
          'b int -{'d | Invalid_argument: 'd; Failure: 'd |}-> 'a
  with 'b < level('a)
   and 'b < 'd
(** Return the n-th element of the given list.
   The first element (head of the list) is at position 0.
   Raise [Failure "nth"] if the list is too short. *)

val rev : ('a, 'b) list -> ('a, 'b) list
(** List reversal. *)

val append : ('a, 'b) list -> ('a, 'b) list -> ('a, 'b) list
(** Catenate two lists.  Same function as the infix operator [@].
   Not tail-recursive (length of the first argument).  The [@]
   operator is not tail-recursive either. *)

val rev_append : ('a, 'b) list -> ('a, 'b) list -> ('a, 'b) list
(** [List.rev_append l1 l2] reverses [l1] and concatenates it to [l2].

   This is equivalent to {!List.rev}[ l1 @ l2], but [rev_append] is
   tail-recursive and more efficient. *)

val concat : (('a, 'b) list, 'b) list -> ('a, 'b) list
(** Concatenate a list of lists.  Not tail-recursive
   (length of the argument + length of the longest sub-list). *)

val flatten : (('a, 'b) list, 'b) list -> ('a, 'b) list
(** Flatten a list of lists.  Not tail-recursive
   (length of the argument + length of the longest sub-list). *)


(** {2 Iterators} *)

val iter : ('a ={'b | 'c}=> 'd) -> ('a, 'b) list -{ 'b | 'c |}-> unit
           with content('c) < 'b
(** [List.iter f [a1; ...; an]] applies function [f] in turn to
   [a1; ...; an]. It is equivalent to
   [begin f a1; f a2; ...; f an; () end]. *)

val map : ('a ={'b | 'c}=> 'e) ->
          ('a, 'f) list -{'b | 'c |}-> ('e, 'f) list
with 'f < 'b and content('c) < 'b
(** [List.map f [a1; ...; an]] applies function [f] to [a1, ..., an],
   and builds the list [[f a1; ...; f an]]
   with the results returned by [f].  Not tail-recursive. *)

val rev_map : ('a ={'b | 'c}=> 'e) ->
              ('a, 'f) list -{'b | 'c |}-> ('e, 'f) list
with 'f < 'b and  content('c) < 'b
(** [List.rev_map f l] gives the same result as
   {!List.rev}[ (]{!List.map}[ f l)], but is tail-recursive and
   more efficient. *)


val fold_left : ('a => 'b ={'c | 'd}=> 'a) ->
                'a -> ('b, 'e) list -{'c | 'd |}-> 'f
with content('d), 'e < 'c
and  'e < level('f)
and  'a < 'f
(** [List.fold_left f a [b1; ...; bn]] is
   [f (... (f (f a b1) b2) ...) bn]. *)

val fold_right : ('a => 'b ={'c | 'd}=> 'f) ->
                 ('a, 'e) list -> 'f -{'c | 'd |}-> 'f
with content('d), 'e < 'c
and  'e < level('b), level('f)
and  'f < 'b
(** [List.fold_right f [a1; ...; an] b] is
   [f a1 (f a2 (... (f an b) ...))].  Not tail-recursive. *)

(** {2 Iterators on two lists} *)

val iter2 : ('a => 'f ={'b | Invalid_argument: 'c; 'd}=> 'h) ->
            ('a, 'c) list -> 
	    ('f, 'c) list -{'c | Invalid_argument: 'i; 'd|}-> unit
	    with 'c, content('d) < 'i, 'b
(** [List.iter2 f [a1; ...; an] [b1; ...; bn]] calls in turn
   [f a1 b1; ...; f an bn].
   Raise [Invalid_argument] if the two lists have
   different lengths. *)
(*
val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
(** [List.map2 f [a1; ...; an] [b1; ...; bn]] is
   [[f a1 b1; ...; f an bn]].
   Raise [Invalid_argument] if the two lists have
   different lengths.  Not tail-recursive. *)

val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
(** [List.rev_map2 f l] gives the same result as
   {!List.rev}[ (]{!List.map2}[ f l)], but is tail-recursive and
   more efficient. *)

val fold_left2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
(** [List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]] is
   [f (... (f (f a b1 c1) b2 c2) ...) bn cn].
   Raise [Invalid_argument] if the two lists have
   different lengths. *)

val fold_right2 : ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
(** [List.fold_right2 f [a1; ...; an] [b1; ...; bn] c] is
   [f a1 b1 (f a2 b2 (... (f an bn c) ...))].
   Raise [Invalid_argument] if the two lists have
   different lengths.  Not tail-recursive. *)
*)

(** {2 List scanning} *)


val for_all : ('a -{'b | 'c | 'd}-> 'e bool) ->
              ('a, 'd) list -{'b | 'c |}-> 'e bool
with 'd < 'b and 'd < 'e and content('c) < 'b
(** [for_all p [a1; ...; an]] checks if all elements of the list
   satisfy the predicate [p]. That is, it returns
   [(p a1) && (p a2) && ... && (p an)]. *)

val exists : ('a -{'b | 'c | 'd}-> 'e bool) ->
             ('a, 'd) list -{'b | 'c |}-> 'e bool
with 'd < 'b and 'd < 'e and content('c) < 'b
(** [exists p [a1; ...; an]] checks if at least one element of
   the list satisfies the predicate [p]. That is, it returns
   [(p a1) || (p a2) || ... || (p an)]. *)
(*
val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
(** Same as {!List.for_all}, but for a two-argument predicate.
   Raise [Invalid_argument] if the two lists have
   different lengths. *)

val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
(** Same as {!List.exists}, but for a two-argument predicate.
   Raise [Invalid_argument] if the two lists have
   different lengths. *)
*)
val mem : 'a -> ('a, 'b) list -> 'b bool
with content('a) < 'b
(** [mem a l] is true if and only if [a] is equal
   to an element of [l]. *)

val memq : 'a -> ('a, 'b) list -> 'b bool
with content('a) < 'b
(** Same as {!List.mem}, but uses physical equality instead of structural
   equality to compare list elements. *)


(** {2 List searching} *)

val find : ('a -{'b | Not_found: 'c; 'd | 'e}-> 'e bool) ->
           ('a, 'e) list -{'f | Not_found: 'c; 'd |}-> 'g
           with 'e, 'f < 'c
           and  'e, 'f < 'b
           and  'e < level('g)
           and  'a < 'g
(** [find p l] returns the first element of the list [l]
   that satisfies the predicate [p].
   Raise [Not_found] if there is no value that satisfies [p] in the
   list [l]. *)

val filter : ('a -{'b | 'c | 'd}-> 'd bool) ->
             ('a, 'd) list -{'b | 'c |}-> ('a, 'd) list
             with 'd < 'b
(** [filter p l] returns all the elements of the list [l]
   that satisfy the predicate [p].  The order of the elements
   in the input list is preserved.  *)

val find_all : ('a -{'b | 'c | 'd}-> 'd bool) ->
               ('a, 'd) list -{'b | 'c |}-> ('a, 'd) list
               with 'd < 'b
(** [find_all] is another name for {!List.filter}. *)

val partition : ('a ={'b | 'c}=> 'd bool) ->
                ('a, 'd) list -{'b | 'c |}-> ('a, 'd) list * ('a, 'd) list
                with 'd < 'b
(** [partition p l] returns a pair of lists [(l1, l2)], where
   [l1] is the list of all the elements of [l] that
   satisfy the predicate [p], and [l2] is the list of all the
   elements of [l] that do not satisfy [p].
   The order of the elements in the input list is preserved. *)


(** {2 Association lists} *)

val assoc : 'a -> ('a * 'b, 'c) list -{'d | Not_found: 'd |}-> 'b
            with 'c < level('b), 'd
            and  content('a) < level('b), 'd
(** [assoc a l] returns the value associated with key [a] in the list of
   pairs [l]. 

   That is,
   [assoc a [ ...; (a,b); ...] = b]
   if [(a,b)] is the leftmost binding of [a] in list [l].
   Raise [Not_found] if there is no value associated with [a] in the
   list [l]. *)

(*
val assq : 'a -> ('a * 'b) list -> 'b
(** Same as {!List.assoc}, but uses physical equality instead of structural
   equality to compare keys. *)
*)

val mem_assoc : 'a -> ('a * 'b, 'c) list -> 'c bool
                with content('a) < 'c
(** Same as {!List.assoc}, but simply return true if a binding exists,
   and false if no bindings exist for the given key. *)
(*
val mem_assq : 'a -> ('a * 'b) list -> bool
(** Same as {!List.mem_assoc}, but uses physical equality instead of
   structural equality to compare keys. *)
*)
val remove_assoc : 'a -> ('a * 'b, 'c) list -> ('a * 'b, 'c) list
                   with content('a) < 'c
(** [remove_assoc a l] returns the list of
   pairs [l] without the first pair with key [a], if any.
   Not tail-recursive. *)
(*
val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
(** Same as {!List.remove_assoc}, but uses physical equality instead
   of structural equality to compare keys.  Not tail-recursive. *)
*)

(** {2 Lists of pairs} *)


val split : ('a * 'b, 'c) list -> ('a, 'c) list * ('b, 'c) list
(** Transform a list of pairs into a pair of lists:

   [split [(a1,b1); ...; (an,bn)]] is [([a1; ...; an], [b1; ...; bn])].
   Not tail-recursive.
*)
(*
val combine : ('a, 'b) list ->
              ('d, 'b) list -{| Invalid_argument: 'b |}-> ('a * 'd, 'b) list
(** Transform a pair of lists into a list of pairs:
   [combine [a1; ...; an] [b1; ...; bn]] is
   [[(a1,b1); ...; (an,bn)]].
   Raise [Invalid_argument] if the two lists
   have different lengths.  Not tail-recursive. *)
*)

(** {2 Sorting} *)

val sort : ('a -{'b | 'c | 'd}-> 'a -{'e | 'c | 'f}-> 'g int) ->
           ('a, 'h) list -{'i | 'c |}-> ('a, 'h) list
           with 'f, 'd, 'g < level('a)
           and  'h, 'i, 'd, content('c) < 'b
           and  'h, 'i, 'f, 'd, content('c) < 'e
(** Sort a list in increasing order according to a comparison
   function.  The comparison function must return 0 if it arguments
   compare as equal, a positive integer if the first is greater,
   and a negative integer if the first is smaller.  For example,
   the [compare] function is a suitable comparison function.
   The resulting list is sorted in increasing order.
   [List.sort] is guaranteed to run in constant heap space
   (in addition to the size of the result list) and logarithmic
   stack space.
   
   The current implementation uses Merge Sort and is the same as
   {!List.stable_sort}.
*)


val stable_sort : ('a -{'b | 'c | 'd}-> 'a -{'e | 'c | 'f}-> 'g int) ->
                  ('a, 'h) list -{'i | 'c |}-> ('a, 'h) list
                  with 'f, 'd, 'g < level('a)
                  and  'h, 'i, 'd, content('c) < 'b
                  and  'h, 'i, 'f, 'd, content('c) < 'e
(** Same as {!List.sort}, but the sorting algorithm is stable.
   
   The current implementation is Merge Sort. It runs in constant
   heap space and logarithmic stack space.
*)
